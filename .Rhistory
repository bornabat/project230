rosenopt_bfgs()
rosenopt_bfgs(alpha = 0.01)
rosenopt_bfgs(alpha = 0.01,delta = 1e-6)
rosenopt_bfgs(alpha = 0.01,delta = 1e-6,n.iter=1e4)
rosenopt_bfgs(alpha = 0.01,delta = 1e-6,n.iter=1e4,init=c(2,2))
rosenopt_bfgs(init=c(2,2))
rosenopt_bfgs(init=c(2,2),n.iter=1e5)
library(project230)
rosenopt_bfgs()
is.singular <- function(mat, tol = .Machine$double.eps^0.5) {
rcond <- 1 / svd(mat, nu = 0, nv = 0)$d[1]
return(rcond < tol)
}
is.singular(H)
H
H = matrix(rnorm(10^2),nrow=10)
is.singular(H)
is.singular(H-H)
H-H
solve(H-H)
is.singular(H-H)
is.singular(H)
is.singular <- function(mat, tol = .Machine$double.eps^0.5) {
rcond <- 1 / svd(mat, nu = 0, nv = 0)$d[1]
print(rcond)
print(tol)
return(rcond < tol)
}
is.singular(H)
is.singular(H-H)
install.packages("matrixcalc")
library(matrixcalc)
is.singular.matrix(H)
is.singular.matrix(H-H)
library(project230)
rosenopt_bfgs()
rosenopt_bfgs(n.iter=1e5)
rosenopt_bfgs(init=c(2,2),n.iter=1e5)
rosenopt_bfgs(init=c(2,3),n.iter=1e5)
rosenopt_bfgs(init=c(2,3),n.iter=1e3)
rosenopt_bfgs(init=c(2,4),n.iter=1e3)
library(project230)
rosenopt_bfgs(n.iter=1e5)
rosenopt_bfgs(init=c(2,2)n.iter=1e5)
rosenopt_bfgs(init=c(2,2),n.iter=1e5)
matrix(rbind(c(2.126336e-06 1.674854e-01),c(1.674854e-01, 1.319236e+04)))
matrix(rbind(c(2.126336e-06, 1.674854e-01),c(1.674854e-01, 1.319236e+04)))
(rbind(c(2.126336e-06, 1.674854e-01),c(1.674854e-01, 1.319236e+04)))
as.matrix(rbind(c(2.126336e-06, 1.674854e-01),c(1.674854e-01, 1.319236e+04)))
sag = as.matrix(rbind(c(2.126336e-06, 1.674854e-01),c(1.674854e-01, 1.319236e+04)))
solve(sag)
is.singular.matrix(sag)
?matrixcalc
??matrixcals
??matrixcalc
??is.singular
matrix.inverse(sag)
try_solve <- function(H, delta = 1e-8) {
H.reg <- H
success <- FALSE
while (!success) {
result <- tryCatch(solve(H.reg), error = function(e) NULL)
if (!is.null(result)) {
success <- TRUE
} else {
H.reg <- H.reg + delta * diag(rep(1, nrow(H.reg)))
delta <- delta * 2
}
}
return(H.reg)
}
try_solve(sag)
solve(try_solve(sag))
library(project230)
rosenopt_bfgs()
library(project230)
rosenopt_bfgs()
rosenbrock(2.21994317, 4.930614)
rosenopt_bfgs(n.iter=1e5)
rosenopt_bfgs(init=c(2,2))
rosenopt_bfgs(init=c(2,2),n.iter=1e5)
rosenopt_bfgs(init=c(2,2),n.iter=1e6)
rosenopt_bfgs(init=c(2,3),n.iter=1e6)
rosenbrock(2.21994317, 4.930614)
rosenbrock(2.21994317, 4.9314)
rosenbrock(2.21994317, 4.9)
rosenbrock(2.21994317, 4.\)
rosenbrock(2.21994317, 4.)
library(project230)
rosenopt_bfgs()
devtools::document()
library(project230)
rosenopt_rmsprop()
library(project230)
rosenopt_rmsprop()
rosenopt_rmsprop(alpha=0.01)
library(project230)
devtools::document()
library(project230)
rosenopt_adagrad()
sag = rosenopt_adagrad()
sag[nrow(sag),]
sag = rosenopt_adam()
sag[nrow(sag),]
sag = rosenopt_adam(n.iter=1e6)
sag[nrow(sag),]
rosenbrock = function(x, y, a=1, b=100) {
return((a - x)^2 + b*(y - x^2)^2)
}
rosen_grad = function(x,y,a=1,b=100){
dx = 2*(x-a) + b*2*(x^2-y)*2*x
dy = -b*2*(x^2-y)
return(c(dx,dy))
}
rosen_grad(1,2)
idx = sample.int(n = 100, size = 32, replace = TRUE)
# compute the gradient on the subset of data
grads = rosen_grad(vals[1], vals[2], x = x[idx], y = y[idx])
rosenopt_sgd = function(init = c(5, 5), n.iter = 1e3, alpha = 0.001, batch.size = 32, epsilon = 1e-6, x = seq(-2, 2, length.out = 100), y = seq(-1, 3, length.out = 100)) {
# initialize variables
xyz = matrix(nrow = n.iter, ncol = 3)
vals = init
lk = rosenbrock(vals[1], vals[2])
# loop through iterations
for (i in 1:n.iter) {
# randomly sample a subset of data
idx = sample.int(n = length(x), size = batch.size, replace = TRUE)
# compute the gradient on the subset of data
grads = rosen_grad(vals[1], vals[2], x[idx], y[idx])
# update parameters and function value
vals = vals - alpha * grads
lk.candid = rosenbrock(vals[1], vals[2])
if (abs(lk.candid - lk) < epsilon) {  # check if change in function value is below threshold
break
}
lk = lk.candid
xyz[i, ] = c(vals[1], vals[2], lk)
}
return(na.omit(xyz))
}
rosenopt_sgd()
sag = rosenopt_sgd()
sag[nrow(sag),]
nrow(sag)
sag[900:1000,]
rosenopt_sgd = function(init = c(5, 5), n.iter = 1e3, alpha = 0.001, batch.size = 32, epsilon = 1e-6, x = seq(-2, 2, length.out = 100), y = seq(-1, 3, length.out = 100)) {
# initialize variables
xyz = matrix(nrow = n.iter, ncol = 3)
vals = init
lk = rosenbrock(vals[1], vals[2])
# loop through iterations
for (i in 1:n.iter) {
# randomly sample a subset of data
idx = sample.int(n = length(x), size = batch.size, replace = TRUE)
# compute the gradient on the subset of data
grads = rosen_grad(vals[1], vals[2], x[idx], y[idx])
# update parameters and function value
vals = vals - alpha * grads
lk.candid = rosenbrock(vals[1], vals[2])
if (abs(lk.candid - lk) < epsilon) {  # check if change in function value is below threshold
break
}
lk = lk.candid
xyz[i, ] = c(vals[1], vals[2], lk)
}
return(na.omit(xyz))
}
init = c(5, 5)
n.iter = 1e3
alpha = 0.001
batch.size = 32
epsilon = 1e-6
x = seq(-2, 2, length.out = 100)
y = seq(-1, 3, length.out = 100)
xyz = matrix(nrow = n.iter, ncol = 3)
vals = init
lk = rosenbrock(vals[1], vals[2])
# randomly sample a subset of data
idx = sample.int(n = length(x), size = batch.size, replace = TRUE)
# compute the gradient on the subset of data
grads = rosen_grad(vals[1], vals[2], x[idx], y[idx])
idx
grads
devtools::document()
rm(list = c("rosen_grad", "rosenbrock"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(project230)
rosen_viz()
rosen_viz(R=5)
rosen_viz(R=2)
rosen_viz(R=3)
library(project230)
rosen_viz(R=3,Rseq=25,lseq=25)
rosen_viz(R=3,Rseq=15,lseq=25)
rosen_viz(R=3,Rseq=15,lseq=45)
library(project230)
data = rosenopt_gd(n.iter=1e3,init=c(2,2))
data
rosen_vizopt(optimizer_output=data)
devtools::document()
library(project230)
rosen_vizopt(optimizer_output=data)
dim(data)
rosen_vizopt(optimizer_output=data,psy=10)
library(project230)
rosen_vizopt(optimizer_output=data,psy=10)
rosenbrock(1.03,1.04)
rosen_vizopt(optimizer_output=data,psy=1)
data = rosenopt_gd(n.iter=1e6,init=c(2,2))
dim(data)
rosen_vizopt(optimizer_output=data,psy=100)
rosen_vizopt(optimizer_output=data,psy=100,R=1)
rosen_vizopt(optimizer_output=data,psy=1000,R=1)
data = rosenopt_adam(n.iter=1e6,init=c(2,2))
rosen_vizopt(optimizer_output=data,psy=1000,R=1)
rosen_vizopt(optimizer_output=data,psy=1000,R=1.5)
data = rosenopt_gd(n.iter=1e6,init=c(-2,2))
rosen_vizopt(optimizer_output=data,psy=1000,R=2.8)
rosen_vizopt(optimizer_output=data,psy=1000,R=1)
data = rosenopt_gd(n.iter=1e6,init=c(-.2,.2))
rosen_vizopt(optimizer_output=data,psy=1000,R=1)
data[1,]
library(project230)
rosen_vizopt(optimizer_output=data,psy=1000,R=1)
rosen_vizopt(optimizer_output=data,psy=1000,R=2)
rosen_vizopt(optimizer_output=data,psy=100,R=1)
rosen_vizopt(optimizer_output=data,psy=10,R=1)
rosen_vizopt(optimizer_output=data,psy=10,R=2)
rosen_vizopt(optimizer_output=data[1:500,],psy=10,R=2)
rosen_vizopt(optimizer_output=data[1:50,],psy=10,R=2)
rosen_vizopt(optimizer_output=data[10:50,],psy=10,R=2)
rosen_vizopt(optimizer_output=data[10:,],psy=10,R=1)
rosen_vizopt(optimizer_output=data[10:nrow(data),],psy=10,R=1)
rosen_vizopt(optimizer_output=data[10:nrow(data),],psy=100,R=1)
rosen_vizopt(optimizer_output=data[10:nrow(data),],psy=1000,R=1)
rosen_vizopt(optimizer_output=data[,],psy=1000,R=1)
data = rosenopt_gd(init=(1.5,0.5))
data = rosenopt_gd(init=c(1.5,0.5),n.iter=1e5)
rosen_vizopt(optimizer_output=data[,],psy=1000,R=1)
data = rosenopt_gd(init=c(.5,1.5),n.iter=1e5)
rosen_vizopt(optimizer_output=data[,],psy=1000,R=1)
rosen_vizopt(optimizer_output=data[,],psy=1000,R=.5)
rosen_vizopt(optimizer_output=data[100:nrow(data),],psy=1000,R=.1)
rosen_vizopt(optimizer_output=data[,],psy=1000,R=.5)
data = rosenopt_adagrad(n.iter=1e6,init=c(1.5,.5))
rosen_vizopt(optimizer_output=data[,],psy=1000,R=.5)
rosen_vizopt(optimizer_output=data[,],psy=100,R=.5)
data[1,]
data
rosen_vizopt(optimizer_output=data[1:5,],psy=100,R=.5)
rosen_vizopt(optimizer_output=data[1:5,],psy=1,R=.5)
data = rosenopt_adagrad(n.iter=1e5,init=c(5.5,.5))
rosen_vizopt(optimizer_output=data[1:5,],psy=1,R=.5)
rosen_vizopt(optimizer_output=data[1:5,],psy=1,R=6)
rosen_vizopt(optimizer_output=data[1:50,],psy=1,R=6)
rosen_vizopt(optimizer_output=data[1:5000,],psy=100,R=6)
rosen_vizopt(optimizer_output=data[,],psy=100,R=6)
rosen_vizopt(optimizer_output=data[,],psy=1,R=6)
library(project230)
rosen_vizopt(optimizer_output=data[,],psy=1,R=6,pnts = F)
data = rosenopt_adagrad(n.iter=1e6,init=c(5.5,.5))
rosen_vizopt(optimizer_output=data[,],psy=1,R=6,pnts = F)
data = rosenopt_gd(n.iter=1e6,init=c(5.5,.5))
rosen_viz()
library(project230)
rosen_viz()
rosen_viz(R=3)
rosen_viz(R=2)
data = rosenopt_gd(n.iter=1e6,init=c(3.5,.5))
rosen_vizopt(optimizer_output=data[,],psy=1,R=6,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=3,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=2.5,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=1.5,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=1.75,pnts = F)
library(project230)
rosen_vizopt(optimizer_output=data[,],psy=1,R=1.75,pnts = F)
rosen_vizopt(optimizer_output=data[1:1e4,],psy=1,R=1.75,pnts = F)
data = rosenopt_fr(n.iter=1e6,init=c(3.5,.5))
rosen_vizopt(optimizer_output=data[1:1e4,],psy=1,R=1.75,pnts = F)
rosen_vizopt(optimizer_output=data[1:1e3,],psy=1,R=1.75,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=1.75,pnts = F)
data = rosenopt_fr(n.iter=1e6,init=c(3.5,.5),alpha=0.001)
rosen_vizopt(optimizer_output=data[,],psy=1,R=1.75,pnts = F)
data = rosenopt_fr(n.iter=1e6,init=c(3.5,.5),alpha=0.01)
rosen_vizopt(optimizer_output=data[,],psy=1,R=1.75,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=1.95,pnts = F)
data[1,]
rosen_vizopt(optimizer_output=data[,],psy=1,R=2,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=2.2,pnts = F)
data = rosenopt_pr(n.iter=1e6,init=c(3.5,.5),alpha=0.01)
rosenopt_pr = function(init = c(5,5), n.iter=1e3, alpha=.001) {
alp.org=alpha
xyz = matrix(nrow = n.iter, ncol = 3)
vals = init
lk = rosenbrock(vals[1], vals[2])
grads = rosen_grad(vals[1], vals[2])
d = -grads  # initialize direction as negative gradient
for (i in 1:n.iter) {
vals.candid = vals + alpha * d
lk.candid = rosenbrock(vals.candid[1], vals.candid[2])
if (lk.candid < lk) {
beta = sum((rosen_grad(vals.candid[1], vals.candid[2]) - grads) * rosen_grad(vals.candid[1], vals.candid[2])) / sum(grads^2)  # compute beta using Polack-Ribiere formula
d = -rosen_grad(vals.candid[1], vals.candid[2]) + beta * d  # update direction using Polack-Ribiere formula
vals = vals.candid
lk = lk.candid
grads = rosen_grad(vals[1], vals[2])
xyz[i,] = c(vals[1], vals[2], lk)
alpha = alp.org
} else {
alpha = alpha / 2
}
}
return(na.omit(xyz))
}
data = rosenopt_pr(n.iter=1e6,init=c(3.5,.5),alpha=0.01)
rosen_vizopt(optimizer_output=data[,],psy=1,R=2.2,pnts = F)
data = rosenopt_pr(n.iter=1e6,init=c(3.5,.5),alpha=0.001)
rosen_vizopt(optimizer_output=data[,],psy=1,R=2.2,pnts = F)
rosen_vizopt(optimizer_output=data[1:1e4,],psy=1,R=2.2,pnts = F)
data = rosenopt_m(n.iter=1e6,init=c(3.5,.5),alpha=0.1)
rosen_vizopt(optimizer_output=data[1:1e4,],psy=1,R=2.2,pnts = F)
rosen_vizopt(optimizer_output=data[2:1e4,],psy=1,R=2.2,pnts = F)
data = rosenopt_nm(n.iter=1e6,init=c(3.5,.5),alpha=0.1)
rosen_vizopt(optimizer_output=data[2:1e4,],psy=1,R=2.2,pnts = F)
data = rosenopt_bfgs(n.iter=1e6,init=c(3.5,.5),alpha=0.1)
rosen_vizopt(optimizer_output=data[2:1e4,],psy=1,R=2.2,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=2.2,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=5.2,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=4.2,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=3.2,pnts = F)
data = rosenopt_adagrad(n.iter=1e6,init=c(3.5,.5),alpha=0.1)
rosen_vizopt(optimizer_output=data[1:1e4,],psy=1,R=3.2,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=3.2,pnts = F)
data = rosenopt_adagrad(n.iter=1e6,init=c(3.5,.5),alpha=0.01)
rosen_vizopt(optimizer_output=data[,],psy=1,R=3.2,pnts = F)
data = rosenopt_adagrad(n.iter=1e6,init=c(3.5,.5),alpha=1)
rosen_vizopt(optimizer_output=data[,],psy=1,R=3.2,pnts = F)
rosen_vizopt(optimizer_output=data[1:1e4,],psy=1,R=3.2,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=3.2,pnts = F)
rosen_vizopt(optimizer_output=data[1:(nrow(data)-10),],psy=1,R=3.2,pnts = F)
rosen_vizopt(optimizer_output=data[1:(nrow(data)-100),],psy=1,R=3.2,pnts = F)
rosen_vizopt(optimizer_output=data[1:(nrow(data)-1000),],psy=1,R=3.2,pnts = F)
rosen_vizopt(optimizer_output=data[1:(nrow(data)-10000),],psy=1,R=3.2,pnts = F)
rosen_vizopt(optimizer_output=data[1:(nrow(data)-100000),],psy=1,R=3.2,pnts = F)
data = rosenopt_adam(n.iter=1e6,init=c(3.5,.5),alpha=1)
rosen_vizopt(optimizer_output=data[1:(nrow(data)-100000),],psy=1,R=3.2,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=3.2,pnts = F)
rosen_vizopt(optimizer_output=data[1:1e4,],psy=1,R=3.2,pnts = F)
data = rosenopt_adam(n.iter=1e6,init=c(3.5,.5),alpha=.01)
rosen_vizopt(optimizer_output=data[1:1e4,],psy=1,R=3.2,pnts = F)
data = rosenopt_adam(n.iter=1e6,init=c(3.5,.5),alpha=.1)
rosen_vizopt(optimizer_output=data[1:1e4,],psy=1,R=3.2,pnts = F)
rosen_vizopt(optimizer_output=data[,],psy=1,R=3.2,pnts = F)
data = rosenopt_adam(n.iter=1e6,init=c(3.5,.5),alpha=.01)
rosen_vizopt(optimizer_output=data[,],psy=1,R=3.2,pnts = F)
data = rosenopt_rmsprop(n.iter=1e6,init=c(3.5,.5),alpha=.01)
rosen_vizopt(optimizer_output=data[,],psy=1,R=3.2,pnts = F)
rosen_viz()
library(project230)
rosen_viz()
library(project230)
library(project230)
rosen_viz()
library(project230)
rosen_viz()
library(project230)
rosen_viz()
library(project230)
rosen_viz()
library(project230)
rosen_viz()
ros_new = function(R = .825, cls = c('orange', 'steelblue'), Rseq = 50, lseq = 100) {
r = seq(0, R, length.out = Rseq)
theta = seq(0, 2 * pi, length.out = lseq)
grd = expand.grid(r, theta)
x = grd[1] * cos(grd[2])
y = grd[1] * sin(grd[2])
x = x + 1
y = y + 1
xy = matrix(cbind(x[, 1], y[, 1]))
z = apply(cbind(x[, 1], y[, 1]), 1, FUN = function(w) rosenbrock(w[1], w[2]))
mat.points = as.matrix(cbind(x, y, z))
library(plotly)
# Create a custom colorscale
custom_colorscale <- list(
list(0, cls[1]),
list(1, cls[2])
)
# Create a heatmap of the loss
fig1 = plot_ly(
x = mat.points[, 1], # X-axis
y = mat.points[, 2], # Y-axis
z = mat.points[, 3], # Z-axis
type = "scatter3d",
mode = "markers",
marker = list(size = 1.2, color = mat.points[, 3], colorscale = custom_colorscale) # Use the custom colorscale
)
fig1 <- fig1 %>% layout(title = list(text = "Rosenbrock Function", font = list(size = 20)),
scene = list(xaxis = list(title = "x", tickfont = list(size = 14), titlefont = list(size = 18)),
yaxis = list(title = "y", tickfont = list(size = 14), titlefont = list(size = 18)),
zaxis = list(title = "Loss", tickfont = list(size = 14), titlefont = list(size = 18))))
# Create a contour plot
fig2 = plot_ly(x = mat.points[, 1], y = mat.points[, 2], z = mat.points[, 3],
type = "contour", colorscale = custom_colorscale) %>%
layout(title = list(text = "Rosenbrock Function Contour Plot", font = list(size = 20)),
xaxis = list(title = "x", tickfont = list(size = 14), titlefont = list(size = 18)),
yaxis = list(title = "y", tickfont = list(size = 14), titlefont = list(size = 18)))
list(fig1, fig2)
}
ros_new()
ros_new()[[2]]
sag = ros_new
sag$1
sag[[1]]
type(sag)
typeof(sag)
ros_new = function(R = .825, cls = c('orange', 'steelblue'), Rseq = 50, lseq = 100) {
r = seq(0, R, length.out = Rseq)
theta = seq(0, 2 * pi, length.out = lseq)
grd = expand.grid(r, theta)
x = grd[1] * cos(grd[2])
y = grd[1] * sin(grd[2])
x = x + 1
y = y + 1
xy = matrix(cbind(x[, 1], y[, 1]))
z = apply(cbind(x[, 1], y[, 1]), 1, FUN = function(w) rosenbrock(w[1], w[2]))
mat.points = as.matrix(cbind(x, y, z))
library(plotly)
# Create a custom colorscale
custom_colorscale <- list(
list(0, cls[1]),
list(1, cls[2])
)
# Create a contour plot
fig2 = plot_ly(x = mat.points[, 1], y = mat.points[, 2], z = mat.points[, 3],
type = "contour", colorscale = custom_colorscale) %>%
layout(title = list(text = "Rosenbrock Function Contour Plot", font = list(size = 20)),
xaxis = list(title = "x", tickfont = list(size = 14), titlefont = list(size = 18)),
yaxis = list(title = "y", tickfont = list(size = 14), titlefont = list(size = 18)))
fig2
}
ros_new()
rosen_viz()
rosen_viz()
rosen_viz()
